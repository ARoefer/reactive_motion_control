// Generated by gencpp from file giskard_high/FollowPathResponse.msg
// DO NOT EDIT!


#ifndef GISKARD_HIGH_MESSAGE_FOLLOWPATHRESPONSE_H
#define GISKARD_HIGH_MESSAGE_FOLLOWPATHRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <suturo_std_msgs/ExecutionFeedback.h>

namespace giskard_high
{
template <class ContainerAllocator>
struct FollowPathResponse_
{
  typedef FollowPathResponse_<ContainerAllocator> Type;

  FollowPathResponse_()
    : feedback()  {
    }
  FollowPathResponse_(const ContainerAllocator& _alloc)
    : feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::suturo_std_msgs::ExecutionFeedback_<ContainerAllocator>  _feedback_type;
  _feedback_type feedback;




  typedef boost::shared_ptr< ::giskard_high::FollowPathResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::giskard_high::FollowPathResponse_<ContainerAllocator> const> ConstPtr;

}; // struct FollowPathResponse_

typedef ::giskard_high::FollowPathResponse_<std::allocator<void> > FollowPathResponse;

typedef boost::shared_ptr< ::giskard_high::FollowPathResponse > FollowPathResponsePtr;
typedef boost::shared_ptr< ::giskard_high::FollowPathResponse const> FollowPathResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::giskard_high::FollowPathResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::giskard_high::FollowPathResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace giskard_high

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'suturo_std_msgs': ['/home/adrian/suturo_ws/src/suturo_msgs/suturo_std_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::giskard_high::FollowPathResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::giskard_high::FollowPathResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_high::FollowPathResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_high::FollowPathResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_high::FollowPathResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_high::FollowPathResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::giskard_high::FollowPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72bd48e7e0500d78b102fe760532f823";
  }

  static const char* value(const ::giskard_high::FollowPathResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72bd48e7e0500d78ULL;
  static const uint64_t static_value2 = 0xb102fe760532f823ULL;
};

template<class ContainerAllocator>
struct DataType< ::giskard_high::FollowPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "giskard_high/FollowPathResponse";
  }

  static const char* value(const ::giskard_high::FollowPathResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::giskard_high::FollowPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "suturo_std_msgs/ExecutionFeedback feedback\n\
\n\
================================================================================\n\
MSG: suturo_std_msgs/ExecutionFeedback\n\
uint8 value\n\
\n\
uint8 FAILED = 0\n\
uint8 SUCCESS = 1\n\
uint8 ABORTED = 2\n\
uint8 OCCUPIED = 3\n\
";
  }

  static const char* value(const ::giskard_high::FollowPathResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::giskard_high::FollowPathResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct FollowPathResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::giskard_high::FollowPathResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::giskard_high::FollowPathResponse_<ContainerAllocator>& v)
  {
    s << indent << "feedback: ";
    s << std::endl;
    Printer< ::suturo_std_msgs::ExecutionFeedback_<ContainerAllocator> >::stream(s, indent + "  ", v.feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GISKARD_HIGH_MESSAGE_FOLLOWPATHRESPONSE_H
